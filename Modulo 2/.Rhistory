}
apply(is.na(dat),2,sum)/nrow(dat)*100
dat$V1 <- dat$V1+3
dat$V1
tapply(dat$V1, dat$V6, mean)
head(dat)
dat[(dat$V3=="audi")&(dat$V6=="four")&(dat$V13<55),]
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data'
dat <- read.csv(url,na.strings = "?",header=FALSE)
# View(dat) #abre una pestaña en RStudio con la tabla para verla con mayor precisión
summary(dat)
dim(dat)
print()
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data'
dat <- read.csv(url,na.strings = "?",header=FALSE)
# View(dat) #abre una pestaña en RStudio con la tabla para verla con mayor precisión
summary(dat)
dim(dat)
print("")
unique(dat$V1) #saca los valores únicos de la columna V1
#incluímos una función para ver cómo se puede hacer automáticamente este apartado. Los bucles los veremos en el siguiente notebook así como las funciones
factores<- which(sapply(dat,class)=="factor")
for (i in 1:length(factores)){
print(unique(dat[,i]))
}
apply(is.na(dat),2,sum)/nrow(dat)*100
dat$V1 <- dat$V1+3
dat$V1
tapply(dat$V1, dat$V6, mean)
head(dat)
dat[(dat$V3=="audi")&(dat$V6=="four")&(dat$V13<55),]
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data'
dat <- read.csv(url,na.strings = "?",header=FALSE)
# View(dat) #abre una pestaña en RStudio con la tabla para verla con mayor precisión
summary(dat)
dim(dat)
print("")
unique(dat$V1) #saca los valores únicos de la columna V1
print("")
#incluímos una función para ver cómo se puede hacer automáticamente este apartado. Los bucles los veremos en el siguiente notebook así como las funciones
factores<- which(sapply(dat,class)=="factor")
for (i in 1:length(factores)){
print(unique(dat[,i]))
}
apply(is.na(dat),2,sum)/nrow(dat)*100
dat$V1 <- dat$V1+3
dat$V1
tapply(dat$V1, dat$V6, mean)
head(dat)
dat[(dat$V3=="audi")&(dat$V6=="four")&(dat$V13<55),]
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data'
dat <- read.csv(url,na.strings = "?",header=FALSE)
# View(dat) #abre una pestaña en RStudio con la tabla para verla con mayor precisión
print("sumario")
summary(dat)
print("dimensiones")
dim(dat)
print("unique")
unique(dat$V1) #saca los valores únicos de la columna V1
print("")
#incluímos una función para ver cómo se puede hacer automáticamente este apartado. Los bucles los veremos en el siguiente notebook así como las funciones
factores<- which(sapply(dat,class)=="factor")
for (i in 1:length(factores)){
print(unique(dat[,i]))
}
apply(is.na(dat),2,sum)/nrow(dat)*100
dat$V1 <- dat$V1+3
dat$V1
tapply(dat$V1, dat$V6, mean)
head(dat)
dat[(dat$V3=="audi")&(dat$V6=="four")&(dat$V13<55),]
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data'
dat <- read.csv(url,na.strings = "?",header=FALSE)
# View(dat) #abre una pestaña en RStudio con la tabla para verla con mayor precisión
print("sumario")
summary(dat)
print("dimensiones")
dim(dat)
print("unique")
unique(dat$V1) #saca los valores únicos de la columna V1
#incluímos una función para ver cómo se puede hacer automáticamente este apartado. Los bucles los veremos en el siguiente notebook así como las funciones
factores<- which(sapply(dat,class)=="factor")
for (i in 1:length(factores)){
print(unique(dat[,i]))
}
print("proporcion")
apply(is.na(dat),2,sum)/nrow(dat)*100
dat$V1 <- dat$V1+3
dat$V1
tapply(dat$V1, dat$V6, mean)
head(dat)
dat[(dat$V3=="audi")&(dat$V6=="four")&(dat$V13<55),]
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data'
dat <- read.csv(url,na.strings = "?",header=FALSE)
# View(dat) #abre una pestaña en RStudio con la tabla para verla con mayor precisión
print("sumario")
summary(dat)
print("dimensiones")
dim(dat)
print("unique")
unique(dat$V1) #saca los valores únicos de la columna V1
#incluímos una función para ver cómo se puede hacer automáticamente este apartado. Los bucles los veremos en el siguiente notebook así como las funciones
factores<- which(sapply(dat,class)=="factor")
for (i in 1:length(factores)){
print(unique(dat[,i]))
}
print("proporcion")
apply(is.na(dat),2,sum)/nrow(dat)*100
print("columna1")
dat$V1 <- dat$V1+3
dat$V1
tapply(dat$V1, dat$V6, mean)
head(dat)
dat[(dat$V3=="audi")&(dat$V6=="four")&(dat$V13<55),]
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data'
dat <- read.csv(url,na.strings = "?",header=FALSE)
View(dat) #abre una pestaña en RStudio con la tabla para verla con mayor precisión
print("sumario")
summary(dat)
print("dimensiones")
dim(dat)
print("unique")
unique(dat$V1) #saca los valores únicos de la columna V1
#incluímos una función para ver cómo se puede hacer automáticamente este apartado. Los bucles los veremos en el siguiente notebook así como las funciones
factores<- which(sapply(dat,class)=="factor")
for (i in 1:length(factores)){
print(unique(dat[,i]))
}
print("proporcion")
apply(is.na(dat),2,sum)/nrow(dat)*100
print("columna1")
dat$V1 <- dat$V1+3
dat$V1
tapply(dat$V1, dat$V6, mean)
head(dat)
dat[(dat$V3=="audi")&(dat$V6=="four")&(dat$V13<55),]
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data'
dat <- read.csv(url,na.strings = "?",header=FALSE)
View(dat) #abre una pestaña en RStudio con la tabla para verla con mayor precisión
print("sumario")
summary(dat)
print("dimensiones")
dim(dat)
print("unique")
unique(dat$V1) #saca los valores únicos de la columna V1
#incluímos una función para ver cómo se puede hacer automáticamente este apartado. Los bucles los veremos en el siguiente notebook así como las funciones
factores<- which(sapply(dat,class)=="factor")
for (i in 1:length(factores)){
print(unique(dat[,i]))
}
print("proporcion")
apply(is.na(dat),2,sum)/nrow(dat)*100
print("columna1")
dat$V1 <- dat$V1+3
dat$V1
tapply(dat$V1, dat$V6, mean)
head(dat)
dat[(dat$V3=="audi")&(dat$V6=="four")&(dat$V13<55),]
install.packages("dplyr")
library(dplyr)
data("airquality")
head(airquality)
filter(airquality, Temp > 70) #filtramos las filas con temperatura superior a 70
filter(airquality, Temp > 80 & Month > 5) #igual pero añadimos la condición mes
mutate(airquality, TempInC = (Temp - 32) * 5 / 9) #transformamos una columna
summarise(airquality, mean(Temp, na.rm = TRUE)) #calcula la media de la temperatura ignorando valores faltantes
summarise(group_by(airquality, Month), mean(Temp, na.rm = TRUE)) #agrupa por mes y calcula media temperatura
count(airquality, Month) #cuenta las apariciones de cada categoría de una columna
arrange(airquality, desc(Month), Day) #ordena descendientemente según mes
# install.packages("dplyr")
library(dplyr)
data("airquality")
head(airquality)
filter(airquality, Temp > 70) #filtramos las filas con temperatura superior a 70
filter(airquality, Temp > 80 & Month > 5) #igual pero añadimos la condición mes
mutate(airquality, TempInC = (Temp - 32) * 5 / 9) #transformamos una columna
summarise(airquality, mean(Temp, na.rm = TRUE)) #calcula la media de la temperatura ignorando valores faltantes
summarise(group_by(airquality, Month), mean(Temp, na.rm = TRUE)) #agrupa por mes y calcula media temperatura
count(airquality, Month) #cuenta las apariciones de cada categoría de una columna
arrange(airquality, desc(Month), Day) #ordena descendientemente según mes
# install.packages("dplyr")
library(dplyr)
data("airquality")
print("head")
head(airquality)
print("Temp > 70")
filter(airquality, Temp > 70) #filtramos las filas con temperatura superior a 70
print("Temp > 80 & Month > 5")
filter(airquality, Temp > 80 & Month > 5) #igual pero añadimos la condición mes
mutate(airquality, TempInC = (Temp - 32) * 5 / 9) #transformamos una columna
summarise(airquality, mean(Temp, na.rm = TRUE)) #calcula la media de la temperatura ignorando valores faltantes
summarise(group_by(airquality, Month), mean(Temp, na.rm = TRUE)) #agrupa por mes y calcula media temperatura
count(airquality, Month) #cuenta las apariciones de cada categoría de una columna
arrange(airquality, desc(Month), Day) #ordena descendientemente según mes
# install.packages("dplyr")
library(dplyr)
data("airquality")
print("head")
head(airquality)
print("Temp > 70")
filter(airquality, Temp > 70) #filtramos las filas con temperatura superior a 70
print("Temp > 80 & Month > 5")
filter(airquality, Temp > 80 & Month > 5) #igual pero añadimos la condición mes
print("TempInC = (Temp - 32) * 5 / 9")
mutate(airquality, TempInC = (Temp - 32) * 5 / 9) #transformamos una columna
summarise(airquality, mean(Temp, na.rm = TRUE)) #calcula la media de la temperatura ignorando valores faltantes
summarise(group_by(airquality, Month), mean(Temp, na.rm = TRUE)) #agrupa por mes y calcula media temperatura
count(airquality, Month) #cuenta las apariciones de cada categoría de una columna
arrange(airquality, desc(Month), Day) #ordena descendientemente según mes
# install.packages("dplyr")
library(dplyr)
data("airquality")
print("head")
head(airquality)
print("Temp > 70")
filter(airquality, Temp > 70) #filtramos las filas con temperatura superior a 70
print("Temp > 80 & Month > 5")
filter(airquality, Temp > 80 & Month > 5) #igual pero añadimos la condición mes
print("TempInC = (Temp - 32) * 5 / 9")
mutate(airquality, TempInC = (Temp - 32) * 5 / 9) #transformamos una columna
print("media de la temperatura ignorando valores faltantes")
summarise(airquality, mean(Temp, na.rm = TRUE)) #calcula la media de la temperatura ignorando valores faltantes
summarise(group_by(airquality, Month), mean(Temp, na.rm = TRUE)) #agrupa por mes y calcula media temperatura
count(airquality, Month) #cuenta las apariciones de cada categoría de una columna
arrange(airquality, desc(Month), Day) #ordena descendientemente según mes
# install.packages("dplyr")
library(dplyr)
data("airquality")
print("head")
head(airquality)
print("Temp > 70")
filter(airquality, Temp > 70) #filtramos las filas con temperatura superior a 70
print("Temp > 80 & Month > 5")
filter(airquality, Temp > 80 & Month > 5) #igual pero añadimos la condición mes
print("TempInC = (Temp - 32) * 5 / 9")
mutate(airquality, TempInC = (Temp - 32) * 5 / 9) #transformamos una columna
print("media de la temperatura ignorando valores faltantes")
summarise(airquality, mean(Temp, na.rm = TRUE)) #calcula la media de la temperatura ignorando valores faltantes
print("agrupa por mes y calcula media temperatura")
summarise(group_by(airquality, Month), mean(Temp, na.rm = TRUE)) #agrupa por mes y calcula media temperatura
count(airquality, Month) #cuenta las apariciones de cada categoría de una columna
arrange(airquality, desc(Month), Day) #ordena descendientemente según mes
# install.packages("dplyr")
library(dplyr)
data("airquality")
print("head")
head(airquality)
print("Temp > 70")
filter(airquality, Temp > 70) #filtramos las filas con temperatura superior a 70
print("Temp > 80 & Month > 5")
filter(airquality, Temp > 80 & Month > 5) #igual pero añadimos la condición mes
print("TempInC = (Temp - 32) * 5 / 9")
mutate(airquality, TempInC = (Temp - 32) * 5 / 9) #transformamos una columna
print("media de la temperatura ignorando valores faltantes")
summarise(airquality, mean(Temp, na.rm = TRUE)) #calcula la media de la temperatura ignorando valores faltantes
print("agrupa por mes y calcula media temperatura")
summarise(group_by(airquality, Month), mean(Temp, na.rm = TRUE)) #agrupa por mes y calcula media temperatura
print("apariciones de cada categoría de una columna")
count(airquality, Month) #cuenta las apariciones de cada categoría de una columna
arrange(airquality, desc(Month), Day) #ordena descendientemente según mes
# install.packages("dplyr")
library(dplyr)
data("airquality")
print("head")
head(airquality)
print("Temp > 70")
filter(airquality, Temp > 70) #filtramos las filas con temperatura superior a 70
print("Temp > 80 & Month > 5")
filter(airquality, Temp > 80 & Month > 5) #igual pero añadimos la condición mes
print("TempInC = (Temp - 32) * 5 / 9")
mutate(airquality, TempInC = (Temp - 32) * 5 / 9) #transformamos una columna
print("media de la temperatura ignorando valores faltantes")
summarise(airquality, mean(Temp, na.rm = TRUE)) #calcula la media de la temperatura ignorando valores faltantes
print("agrupa por mes y calcula media temperatura")
summarise(group_by(airquality, Month), mean(Temp, na.rm = TRUE)) #agrupa por mes y calcula media temperatura
print("apariciones de cada categoría de una columna")
count(airquality, Month) #cuenta las apariciones de cada categoría de una columna
print("ordena descendientemente según mes")
arrange(airquality, desc(Month), Day) #ordena descendientemente según mes
arrange(airquality, desc(Month), Day) #ordena descendientemente según mes
airquality %>%
filter(Month != 5) %>%
group_by(Month) %>%
summarise(mean(Temp, na.rm = TRUE))
func <- function(x,y){
#operaciones
#respuesta
return(x+y)
}
func(3,5)
func(c(1,3), c(5,10))
for (i in 1:5){
print(i)
}
x<-"M"
if (x=="H"){
print("Es hombre")
}else{print("Es mujer")}
x<-"M"
if (x=="H"){
print("Es hombre")
}else{print("Es mujer")}
x <- c(1:20)
y <- numeric(length(x))
y
for (i in 1:length(x)) if (x[i] == 3) y[i] <- 0 else y[i] <- 1
y
cuentapositivos(c(-3,2,10,-7,9,90))
cuentapositivos <- function(x){
return(sum(x>0))
}
cuentapositivos(c(-3,2,10,-7,9,90))
fact <- function(n){
return(prod(1:n))
}
fact(7)
data("USArrests.csv")
USArrests
for (i in colnames(USArrests)){
print(c(i,rownames(USArrests)[which.max(USArrests[,i])]))
print(max(USArrests[i]))
}
M <- data.frame(X,Y)
M
M <- data.frame(X,Y)
M
unique(M)
M
unique(M)
M.rownames <- c("CA","SE","MA","BA","VA")
M
rownames(M) <- c("CA","SE","MA","BA","VA")
row.names(M) <- c("CA","SE","MA","BA","VA")
M <- data.frame(X,Y)
M
M <- unique(M)
rownames(M) <- c("CA","SE","MA","BA","VA")
M
M$Z <- (M$X + M$Y) / M$X
M
M[A]$X <- 2
M[rownames(M)=="BA","X"] <- 2
M
M[M$Y<4]
M[,M$Y<4]
M[,Y<4]
M[,"Y"<4]
M["Y"<4]
M[,"Y"<4]
M[M$Y<4,]
M$costa <- factor(c("I","I","I","C","C","I"))
M$costa <- factor(c("I","I","I","C","C"))
M
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data"
dat <- read.csv(url,na.strings = "?",header=FALSE)
summary(dat)
dim(dat)
View(dat)
factores<- which(sapply(dat,class)=="factor")
for (i in 1:length(factores)){
print(unique(dat[,i]))
}
dat$V1 <- dat$V1+3
dat$V1
tapply(dat$V1, dat$V6, mean)
dat$V3 == "audi"
dat[dat$V3 == "audi",]
dat[dat$V3 == "audi" & dat$V6 == "four" & dat$V13 < 55,]
data(cars)
help(cars)
head(cars)
plot(cars)
install.packages("ggplot2")
library(ggplot2)
ggplot(cars, aes(x=speed, y=dist)) + #carga los datos y establece las variables
geom_point(shape=1)      # usa círculos huecos
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(shape=1) +    #  usa círculos huecos
geom_smooth(method=lm)   # añade recta de regresión con intervalo de confianza 95%
View(cars)
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(shape=1) +    # usa círculos huecos
geom_smooth(method=lm, se=FALSE)  # añade recta de regresión sin región de confianza
ggplot(cars, aes(x=speed, y=dist)) +
geom_point(shape=1) +   # usa círculos huecos
geom_smooth()           # añade una curva suavizada sobre los datos y su región de confianza
data(diamonds)
head(diamonds)
str(diamonds)
ggplot(diamonds, aes(x = carat, y = price)) + geom_point()
ggplot(diamonds, aes(x = carat, y = price)) + geom_point(shape = 25, size = 1)
ggplot(diamonds, aes(x = carat, y = price, colour = cut)) + geom_point(size = 1.5)
easy <- ggplot(diamonds, aes(x = carat, y = price))
easy + geom_point(alpha = 0.1)
easy + geom_point(alpha = 0.05)
en funciónd e una variable
bin <- ggplot(diamonds, aes(x = carat, y = price))
bin + stat_bin2d()
data(mpg)
help(mpg)
head(mpg)
hist(mpg$hwy)
ggplot(mpg, aes(x=hwy)) + geom_histogram(binwidth=3) #establece el ancho de cada partición
ggplot(mpg, aes(x=hwy)) + geom_histogram(bins=30) # establece el número de particiones
ggplot(mpg, aes(x=hwy)) +
geom_histogram(binwidth=.5, colour="black", fill="white") #opciones de color
ggplot(mpg, aes(x=hwy)) + geom_density(fill="red")
# histograma con curva de densidad
ggplot(mpg, aes(x=hwy)) +
geom_histogram(aes(y=..density..),
binwidth=2,
colour="black", fill="blue") +
geom_density(alpha=.2, fill="red")  #rellenado de la curva de densidad en rojo suave
mpg_subset <- mpg[mpg$manufacturer=="audi" | mpg$manufacturer=="volkswagen" , ]
str(mpg_subset)
ggplot(mpg_subset, aes(x=hwy, fill=manufacturer)) +
geom_histogram(binwidth=2, alpha=.5, position="identity")
ggplot(mpg_subset, aes(x=hwy, fill=manufacturer)) +
geom_histogram(binwidth=2, position="dodge")
ggplot(mpg_subset, aes(x=hwy, fill=manufacturer)) + geom_density()
ggplot(mpg_subset, aes(x=hwy, fill=manufacturer)) + geom_density(alpha=.3)
set.seed(6298)
diamonds_small <- diamonds[sample(nrow(diamonds), 1000), ]
ggplot(diamonds_small, aes(x = price)) + geom_histogram()
ggplot(diamonds_small, aes(x = price)) + geom_histogram(binwidth = 1000)
ggplot(diamonds_small, aes(price, ..density.., colour = cut)) + geom_freqpoly(binwidth = 1000)
hist_cut <- ggplot(diamonds_small, aes(x = price, fill = cut))
hist_cut <- ggplot(diamonds_small, aes(x = price, fill = cut))
hist_cut <- ggplot(diamonds_small, aes(x = price, fill = cut))
hist_cut + geom_histogram(binwidth = 1000)
ggplot(diamonds_small, aes(price, fill = cut)) + geom_density(alpha = 0.2)
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
data(tips)
help(tips)
head(tips)
# gráfico de barras básico de factura total respecto a hora del día
# se consume más en el almuerzo que en la cena
ggplot(data=tips, aes(x=time, y=total_bill)) +
geom_bar(stat="identity")
View(tips)
ggplot(data=tips, aes(x=time, y=total_bill)) +
geom_bar(stat="identity")
ggplot(data=tips, aes(x=time, y=total_bill, fill=smoker)) +
geom_bar(stat="identity")
ggplot(data=tips, aes(x=day)) +
geom_bar(stat="count")
ggplot(data=tips, aes(x=day, y=total_bill)) +
geom_bar(stat = "summary", fun.y = "mean")
data(ToothGrowth)
help("ToothGrowth")
head(ToothGrowth)
tg <- ToothGrowth
install.packages("Rmisc")
library(Rmisc)
tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
tgc
ggplot(tgc, aes(x=dose, y=len, colour=supp)) +
geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1) +
geom_line() +
geom_point()
ggplot(tips, aes(x=day, y=tip, colour="red")) +
geom_line() +
geom_point()
p <- ggplot(diamonds, aes(cut, price))
p + geom_boxplot()
ggplot(tips, aes(day, tip)) +  geom_boxplot() + coord_flip()
install.packages(c("hexbin","gcookbook"))
libs <- c("ggplot2", "plyr", "hexbin", "gcookbook")
lapply(libs, require, character.only = T)
data(diamonds)
head(diamonds)
str(diamonds)
set.seed(6298)
diamonds_small <- diamonds[sample(nrow(diamonds), 1000), ]
ggplot(diamonds_small, aes(x = price)) + geom_histogram()
ggplot(diamonds_small, aes(x = price)) + geom_histogram(binwidth = 1000)
ggplot(diamonds_small, aes(price, ..density.., colour = cut)) + geom_freqpoly(binwidth = 1000)
hist_cut <- ggplot(diamonds_small, aes(x = price, fill = cut))
hist_cut <- ggplot(diamonds_small, aes(x = price, fill = cut))
hist_cut + geom_histogram(binwidth = 1000)
ggplot(diamonds_small, aes(price, fill = cut)) + geom_density(alpha = 0.2)
flicker <- read.csv("CASO_FINAL_crx.data")
cred <- read.csv("CASO_FINAL_crx.data")
View(cred)
cred <- read.csv("CASO_FINAL_crx.data", header = FALSE)
str(cred)
X <- data.matrix(subset(cred, select= - V16))
y <- cred$V16
str(X)
View(X)
summary(cred)
cred <- read.csv("CASO_FINAL_crx.data", header = FALSE)
summary(cred)
mod <- glm(V1~., data=cred, family=binomial)
mod$coefficients
summary(mod)
mod <- glm(V1-, data=cred, family=binomial)
mod <- glm(V1 - V16, data=cred, family=binomial)
mod <- glm(V16~., data=cred, family=binomial)
mod$coefficients
summary(mod)
summary(cred)
str(cred)
ggplot(cred, aes(x = V1))
library(ggplot2)
ggplot(cred, aes(x = V1))
ggplot(cred)
str(cred)
