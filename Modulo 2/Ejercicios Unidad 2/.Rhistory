# install.packages(c("hexbin","gcookbook"))
libs <- c("ggplot2", "plyr", "hexbin", "gcookbook")
lapply(libs, require, character.only = T)
#cargamos datos
data(diamonds)
head(diamonds)
str(diamonds)
#histogramas más sofisticados
set.seed(6298)
diamonds_small <- diamonds[sample(nrow(diamonds), 1000), ]
ggplot(diamonds_small, aes(x = price)) + geom_histogram()
ggplot(diamonds_small, aes(x = price)) + geom_histogram(binwidth = 1000)
#polinomios de frecuencias con colores en función de un factor
ggplot(diamonds_small, aes(price, ..density.., colour = cut)) + geom_freqpoly(binwidth = 1000)
#más opciones, histogramas solapados con distintos colores en función de un factor
hist_cut <- ggplot(diamonds_small, aes(x = price, fill = cut))
hist_cut + geom_histogram(binwidth = 1000)
#gráficos de densidad con diferentes factores marcando colores
ggplot(diamonds_small, aes(price, fill = cut)) + geom_density(alpha = 0.2)
#boxplot respecto a un factor en la misma gráfica
p <- ggplot(diamonds, aes(cut, price))
p + geom_boxplot()
#scatterplots
ggplot(diamonds, aes(x = carat, y = price)) + geom_point()
#se puede usar un shape específico para los puntos
ggplot(diamonds, aes(x = carat, y = price)) + geom_point(shape = 25, size = 1)
#se puede pintar en función de un factor
ggplot(diamonds, aes(x = carat, y = price, colour = cut)) + geom_point(size = 1.5)
#incluso se puede representar en una escala de grises en función del valor de un atributo contínuo
easy <- ggplot(diamonds, aes(x = carat, y = price))
easy + geom_point(alpha = 0.1)
easy + geom_point(alpha = 0.05)
#se puede hacer un scatterplot con bins en rectángulos coloreados en funciónd e una variable
bin <- ggplot(diamonds, aes(x = carat, y = price))
bin + stat_bin2d()
#se pueden hacer gráficos aún más sofisticados:
bin + stat_binhex() + scale_fill_gradient(low = "lightblue", high = "red", breaks = c(0,
500, 1000, 2000, 4000, 6000, 8000), limits = c(0, 8000)) + stat_smooth(method = lm) +
ylim(0, 20000)
data(mpg)
head(mpg)
str(mpg)
qplot(data = mpg, x = displ, y = hwy, color = manufacturer)
qplot(data = mpg, x = displ, y = hwy, color = class)
qplot(data = mpg, x = displ, y = hwy, color = manufacturer, facets = ~class)
myGG <- ggplot(mpg, aes(x = displ, y = hwy))
myGG + geom_point(aes(color = manufacturer)) + stat_smooth(method = lm, se = FALSE)
myGG <- ggplot(mpg, aes(x = displ, y = hwy))
myGG + geom_point(aes(color = manufacturer)) + stat_smooth(method = lm)
myGG + geom_point(aes(color = manufacturer)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(class ~ .)
data(cars)
head(cars)
str(cars)
sp <- ggplot(cars, aes(x = speed, y = dist))
sp + geom_point()
sp + geom_point() + stat_smooth(method = lm)
sp + geom_point() + stat_smooth(method = lm, level = 0.99)
# Loess
sp + geom_point() + stat_smooth(method = loess, se = FALSE)
library(reshape2)
# Look at first few rows
head(tips)
str(tips)
sp <- ggplot(tips, aes(x=total_bill, y=tip/total_bill)) + geom_point(shape=1)
sp
sp + facet_grid(sex ~ .)
sp + facet_grid(. ~ sex)
sp + facet_grid(sex ~ day)
sp + facet_wrap( ~ day, ncol=2)
# A histogram of bill sizes
hp <- ggplot(tips, aes(x=total_bill)) + geom_histogram(binwidth=2,colour="white")
# Histogram of total_bill, divided by sex and smoker
hp + facet_grid(sex ~ smoker)
# Same as above, with scales="free_y"
hp + facet_grid(sex ~ smoker, scales="free_y")
# With panels that have the same scaling, but different range (and therefore different physical sizes)
hp + facet_grid(sex ~ smoker, scales="free", space="free")
# install.packages(c("hexbin","gcookbook"))
libs <- c("ggplot2", "plyr", "hexbin", "gcookbook")
lapply(libs, require, character.only = T)
#cargamos datos
data(diamonds)
head(diamonds)
str(diamonds)
#histogramas más sofisticados
set.seed(6298)
diamonds_small <- diamonds[sample(nrow(diamonds), 1000), ]
ggplot(diamonds_small, aes(x = price)) + geom_histogram()
ggplot(diamonds_small, aes(x = price)) + geom_histogram(binwidth = 1000)
#polinomios de frecuencias con colores en función de un factor
ggplot(diamonds_small, aes(price, ..density.., colour = cut)) + geom_freqpoly(binwidth = 1000)
#más opciones, histogramas solapados con distintos colores en función de un factor
hist_cut <- ggplot(diamonds_small, aes(x = price, fill = cut))
hist_cut + geom_histogram(binwidth = 1000)
#gráficos de densidad con diferentes factores marcando colores
ggplot(diamonds_small, aes(price, fill = cut)) + geom_density(alpha = 0.2)
#boxplot respecto a un factor en la misma gráfica
p <- ggplot(diamonds, aes(cut, price))
p + geom_boxplot()
#scatterplots
ggplot(diamonds, aes(x = carat, y = price)) + geom_point()
#se puede usar un shape específico para los puntos
ggplot(diamonds, aes(x = carat, y = price)) + geom_point(shape = 25, size = 1)
#se puede pintar en función de un factor
ggplot(diamonds, aes(x = carat, y = price, colour = cut)) + geom_point(size = 1.5)
#incluso se puede representar en una escala de grises en función del valor de un atributo contínuo
easy <- ggplot(diamonds, aes(x = carat, y = price))
easy + geom_point(alpha = 0.1)
easy + geom_point(alpha = 0.05)
#se puede hacer un scatterplot con bins en rectángulos coloreados en funciónd e una variable
bin <- ggplot(diamonds, aes(x = carat, y = price))
bin + stat_bin2d()
#se pueden hacer gráficos aún más sofisticados:
bin + stat_binhex() + scale_fill_gradient(low = "lightblue", high = "red", breaks = c(0,
500, 1000, 2000, 4000, 6000, 8000), limits = c(0, 8000)) + stat_smooth(method = lm) +
ylim(0, 20000)
data(mpg)
head(mpg)
str(mpg)
qplot(data = mpg, x = displ, y = hwy, color = manufacturer)
qplot(data = mpg, x = displ, y = hwy, color = class)
qplot(data = mpg, x = displ, y = hwy, color = manufacturer, facets = ~class)
myGG <- ggplot(mpg, aes(x = displ, y = hwy))
myGG + geom_point(aes(color = manufacturer)) + stat_smooth(method = lm, se = FALSE)
myGG <- ggplot(mpg, aes(x = displ, y = hwy))
myGG + geom_point(aes(color = manufacturer)) + stat_smooth(method = lm)
myGG + geom_point(aes(color = manufacturer)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(class ~ .)
data(cars)
head(cars)
str(cars)
sp <- ggplot(cars, aes(x = speed, y = dist))
sp + geom_point()
sp + geom_point() + stat_smooth(method = lm)
sp + geom_point() + stat_smooth(method = lm, level = 0.99)
sp + geom_point() + stat_smooth(method = loess, se = FALSE)
library(reshape2)
# Look at first few rows
head(tips)
str(tips)
sp <- ggplot(tips, aes(x=total_bill, y=tip/total_bill)) + geom_point(shape=1)
sp
sp + facet_grid(sex ~ .)
sp + facet_grid(. ~ sex)
sp + facet_grid(sex ~ day)
sp + facet_wrap( ~ day, ncol=2)
hp <- ggplot(tips, aes(x=total_bill)) + geom_histogram(binwidth=2,colour="white")
hp <- ggplot(tips, aes(x=total_bill)) + geom_histogram(binwidth=2,colour="white")
hp + facet_grid(sex ~ smoker)
hp + facet_grid(sex ~ smoker, scales="free_y")
hp + facet_grid(sex ~ smoker, scales="free", space="free")
df <- read.csv('vgsales.csv')
df <- read.csv('UD2_N03_vgsales.csv')
df$Year <- ordered(df$Year)
df <- df[df$Year<2017,]
head(df)
str(df)
summary(df)
num_Sales <- df[,c("NA_Sales","EU_Sales","JP_Sales","Other_Sales","Global_Sales")]
apply(num_Sales,2,sum)/sum(df$Global_Sales)*100
View(num_Sales)
library(dplyr)
top_genre_year_global <- df %>%
group_by(Year, Genre) %>%
summarize(Revenue = sum(Global_Sales)) %>%
top_n(1)
top_genre_year_JP <- df %>%
group_by(Year, Genre) %>%
summarize(Revenue = sum(JP_Sales)) %>%
top_n(1)
top_genre_year_global
top_genre_year_JP
library(dplyr)
top_genre_year_global <- df %>%
group_by(Year, Genre) %>%
summarize(Revenue = sum(Global_Sales)) %>%
top_n(1)
top_genre_year_JP <- df %>%
group_by(Year, Genre) %>%
summarize(Revenue = sum(JP_Sales)) %>%
top_n(1)
top_genre_year_global
top_genre_year_JP
df <- read.csv('UD2_N03_vgsales.csv')
df$Year <- ordered(df$Year)
df <- df[df$Year<2017,]
head(df)
str(df)
summary(df)
head(df)
str(df)
summary(df)
num_Sales <- df[,c("NA_Sales","EU_Sales","JP_Sales","Other_Sales","Global_Sales")]
apply(num_Sales,2,sum)/sum(df$Global_Sales)*100
library(dplyr)
top_genre_year_global <- df %>%
group_by(Year, Genre) %>%
summarize(Revenue = sum(Global_Sales)) %>%
top_n(1)
top_genre_year_JP <- df %>%
group_by(Year, Genre) %>%
summarize(Revenue = sum(JP_Sales)) %>%
top_n(1)
top_genre_year_global
top_genre_year_global
top_genre_year_JP
library(ggplot2)
ggplot(top_genre_year_global, aes(Year, Revenue, fill = Genre)) +
geom_bar(stat = "identity") +
ggtitle("Top Genre by Revenue each Year in global") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
ggplot(top_genre_year_JP, aes(Year, Revenue, fill = Genre)) +
geom_bar(stat = "identity") +
ggtitle("Top Genre by Revenue each Year in global") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
EU_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(EU_Sales))
NA_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(NA_Sales))
JP_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(JP_Sales))
Global_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(Global_Sales))
Other_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(Other_Sales))
NA_gen
EU_gen
View(num_Sales)
ggplot(EU_gen,aes(x=Genre,y=Revenue))+geom_bar(stat='identity')+ ggtitle("Genre of Games Purchased in EU")+ylab("In Millions")+theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4))
NA_gen
EU_gen
ggplot(EU_gen,aes(x=Genre,y=Revenue))+geom_bar(stat='identity')+ ggtitle("Genre of Games Purchased in EU")+ylab("In Millions")+theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4))
ggplot(NA_gen,aes(x=Genre,y=Revenue))+geom_bar(stat='identity')+ ggtitle("Genre of Games Purchased in NA")+ylab("In Millions")+theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4))
ggplot(JP_gen,aes(x=Genre,y=Revenue))+geom_bar(stat='identity')+ ggtitle("Genre of Games Purchased in Japan")+ylab("In Millions")+theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4))
ggplot(Other_gen,aes(x=Genre,y=Revenue))+geom_bar(stat='identity')+ ggtitle("Genre of Games Purchased in Other")+ylab("In Millions")+theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4))
ggplot(data_sales, aes((year))) +
geom_line(aes(y = na$s , colour = "NA_Sales"),size=1) +
geom_line(aes(y = eu$s, colour = "EU_Sales"),size=1)+
geom_line(aes(y= jp$s ,colour='JP_Sales'),size=1)+
geom_line(aes(y=oth$s,colour='Other_Sales'),size=1)+ylab('Count in Millions')+
scale_x_continuous(breaks = scales::pretty_breaks(n = 20))+
ggtitle("Evolución de ventas a lo largo del tiempo") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
data_sales <- data.frame(year = c(1980:2016),oth$s,jp$s,eu$s,na$s)
na <- df %>% select(Year,NA_Sales) %>% group_by(Year) %>% summarise(s=sum(NA_Sales))
eu <- df %>% select(Year,EU_Sales) %>% group_by(Year) %>% summarise(s=sum(EU_Sales))
jp <- df %>% select(Year,JP_Sales) %>%group_by(Year) %>% summarise(s=sum(JP_Sales))
oth <- df %>% select(Year,Other_Sales) %>% group_by(Year) %>% summarise(s=sum(Other_Sales))
data_sales <- data.frame(year = c(1980:2016),oth$s,jp$s,eu$s,na$s)
ggplot(data_sales, aes((year))) +
geom_line(aes(y = na$s , colour = "NA_Sales"),size=1) +
geom_line(aes(y = eu$s, colour = "EU_Sales"),size=1)+
geom_line(aes(y= jp$s ,colour='JP_Sales'),size=1)+
geom_line(aes(y=oth$s,colour='Other_Sales'),size=1)+ylab('Count in Millions')+
scale_x_continuous(breaks = scales::pretty_breaks(n = 20))+
ggtitle("Evolución de ventas a lo largo del tiempo") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
View(jp)
View(jp)
View(eu)
ggplot(data_sales, aes((year))) +
geom_line(aes(y = na$s , colour = "NA_Sales"),size=1) +
geom_line(aes(y = eu$s, colour = "EU_Sales"),size=1)+
geom_line(aes(y= jp$s ,colour='JP_Sales'),size=1)+
geom_line(aes(y=oth$s,colour='Other_Sales'),size=1)+ylab('Count in Millions')+
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))+
ggtitle("Evolución de ventas a lo largo del tiempo") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
ggplot(data_sales, aes((year))) +
geom_line(aes(y = na$s , colour = "NA_Sales"),size=1) +
geom_line(aes(y = eu$s, colour = "EU_Sales"),size=1)+
geom_line(aes(y= jp$s ,colour='JP_Sales'),size=1)+
geom_line(aes(y=oth$s,colour='Other_Sales'),size=1)+ylab('Count in Millions')+
scale_x_continuous(breaks = scales::pretty_breaks(n = 20))+
ggtitle("Evolución de ventas a lo largo del tiempo") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
ggplot(data_sales, aes((year))) +
geom_line(aes(y = na$s , colour = "NA_Sales"),size=1) +
geom_line(aes(y = eu$s, colour = "EU_Sales"),size=1)+
geom_line(aes(y= jp$s ,colour='JP_Sales'),size=1)+
geom_line(aes(y=oth$s,colour='Other_Sales'),size=1)+ylab('Count in Millions')+
scale_x_continuous(breaks = scales::pretty_breaks(n = 20))+
ggtitle("Evolución de ventas a lo largo del tiempo") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
library(sqldf)
install("sqldf")
install_package("sqldf")
install.packages("sqldf")
install.packages("fmsb")
install.packages("plotly")
library(sqldf)
library(fmsb)
library(plotly)
df<-read.csv('UD2_N03_vgsales')
library(sqldf)
library(fmsb)
library(plotly)
df<-read.csv('UD2_N03_vgsales.csv')
df[df=="N/A"]<-NA
df<-df[complete.cases(df),]
df$Year<-as.numeric(as.character(df$Year))
df<-df[df$Year<=2016,]
summary(df)
ByYear<-sqldf("SELECT Platform, Year, sum(NA_Sales) as AME, sum(EU_Sales) as EU,sum(JP_Sales) as JP, sum(Other_Sales) as Other, sum(Global_Sales) as Global from df group by Platform, Year order by Year,Platform")
View(ByYear)
All<- sqldf("SELECT Year, sum(NA_Sales) as AME, sum(EU_Sales) as EU,sum(JP_Sales) as JP, sum(Other_Sales) as Other, sum(Global_Sales) as Global from df group by Year order by Year")
plot_ly(y=All$EU,x=All$Year,mode = 'lines',name='Europe Sale')%>%
add_trace(y=All$AME,x=All$Year,name='American Sale',mode = 'lines')%>%
add_trace(y=All$Global,x=All$Year,name='Global Sale',mode = 'lines')%>%
add_trace(y=All$JP,x=All$Year,name='Japen Sales',mode = 'lines')%>%
add_trace(y=All$Other,x=All$Year,name='Other Regions',mode = 'lines')%>%
layout(title = "Sales in All Platform",
scene = list(
xaxis = list(title = "Year"),
yaxis = list(title = "Sales")))
DS<-ByYear[ByYear$Platform=='DS',]
plot_ly(y=DS$EU,x=DS$Year,mode = 'lines',name='Europe Sale')%>%
add_trace(y=DS$AME,x=DS$Year,name='American Sale',mode = 'lines')%>%
add_trace(y=DS$Global,x=DS$Year,name='Global Sale',mode = 'lines')%>%
add_trace(y=DS$JP,x=DS$Year,name='Japen Sales',mode = 'lines')%>%
add_trace(y=DS$Other,x=DS$Year,name='Other Regions',mode = 'lines')%>%
layout(title = "Sales in DS Platform",
scene = list(
xaxis = list(title = "Year"),
yaxis = list(title = "Sales")))
Main_platform<-c('DS','PS','PS2','PS3','Wii','X360','PSP')
ByRegion<-sqldf("SELECT Platform,sum(NA_Sales) as AME, sum(EU_Sales) as EU,sum(JP_Sales) as JP, sum(Other_Sales) as Other, sum(Global_Sales) as Global from df group by Platform")
JP<-sum(ByRegion[!ByRegion$Platform %in% Main_platform,]$JP)
AME<-sum(ByRegion[!ByRegion$Platform %in% Main_platform,]$AME)
EU<-sum(ByRegion[!ByRegion$Platform %in% Main_platform,]$EU)
Global<-sum(ByRegion[!ByRegion$Platform %in% Main_platform,]$Global)
Other<-sum(ByRegion[!ByRegion$Platform %in% Main_platform,]$Other)
New_row<-data.frame(Platform='Others',AME=AME,EU=EU,JP=JP,Other=Other,Global=Global)
ByRegion<-ByRegion[ByRegion$Platform%in%Main_platform,]
ByRegion<-rbind(ByRegion,New_row)
Global<-ByRegion[,c('Platform','Global')]
plot_ly(labels=Global$Platform,values=Global$Global,type='pie') %>%
layout(title = 'Global Sales by Platform',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
Platform_Genere<- sqldf('SELECT Genre, Platform, sum(Global_Sales) as Sales from df group by Genre,Platform')
Platform_Genere<-Platform_Genere[Platform_Genere$Platform%in%Main_platform,]
DS<-Platform_Genere[Platform_Genere$Platform=='DS',]
plot_ly(labels = DS$Genre, values = DS$Sales,type='pie',hole=0.6) %>%
layout(title = "Genre of Games on DS",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
Publisher<- sqldf('SELECT Publisher, sum(Global_Sales) as Sales from df group by Publisher order by Sales desc')[c(1:5),]
print(Publisher[,1])
tmp<-df[df$Publisher==Publisher[1,1],]
frame<-data.frame(Region=c('North America','Europe','Japan','Other Regions'),Sales=c(sum(tmp$NA_Sales),sum(tmp$EU_Sales),sum(tmp$JP_Sales),sum(tmp$Other_Sales)))
plot_ly(labels =frame$Region, values =frame$Sales,type='pie',hole=0.4)%>%
layout(title = "Sales Proportion by Regions",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
tmp<-df[df$Publisher==Publisher[1,1],]
frame<-sqldf('SELECT Platform, sum(Global_Sales) as Sales from tmp group by Platform')
frame_t<- t(frame[,2:ncol(frame)])
colnames(frame_t)<-frame[,1]
frame_t<-as.data.frame(frame_t)
data=rbind(rep(max(frame$Sales),ncol(frame_t)) , rep(min(frame$Sales),ncol(frame_t)) , frame_t)
radarchart(data, axistype=1 ,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
vlcex=0.8 )
tmp<-df[df$Publisher==Publisher[2,1],]
frame<-sqldf('SELECT Platform, sum(Global_Sales) as Sales from tmp group by Platform')
frame_t<- t(frame[,2:ncol(frame)])
colnames(frame_t)<-frame[,1]
frame_t<-as.data.frame(frame_t)
data=rbind(rep(max(frame$Sales),ncol(frame_t)) , rep(min(frame$Sales),ncol(frame_t)) , frame_t)
radarchart(data, axistype=1 ,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
vlcex=0.8 )
df <- read.csv('UD2_N03_vgsales.csv')
df$Year <- ordered(df$Year)
df <- df[df$Year<2017,]
head(df)
str(df)
summary(df)
num_Sales <- df[,c("NA_Sales","EU_Sales","JP_Sales","Other_Sales","Global_Sales")]
apply(num_Sales,2,sum)/sum(df$Global_Sales)*100
cor(num_Sales)
cor(num_Sales)
library(dplyr)
top_genre_year_global <- df %>%
group_by(Year, Genre) %>%
summarize(Revenue = sum(Global_Sales)) %>%
top_n(1)
top_genre_year_JP <- df %>%
group_by(Year, Genre) %>%
summarize(Revenue = sum(JP_Sales)) %>%
top_n(1)
top_genre_year_global
top_genre_year_JP
library(ggplot2)
ggplot(top_genre_year_global, aes(Year, Revenue, fill = Genre)) +
geom_bar(stat = "identity") +
ggtitle("Top Genre by Revenue each Year in global") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
ggplot(top_genre_year_JP, aes(Year, Revenue, fill = Genre)) +
geom_bar(stat = "identity") +
ggtitle("Top Genre by Revenue each Year in global") +
theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4),legend.position = "top")
EU_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(EU_Sales))
NA_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(NA_Sales))
JP_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(JP_Sales))
Global_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(Global_Sales))
Other_gen <- df[df$Year>=2008,] %>% group_by(Genre) %>%
summarize(Revenue = sum(Other_Sales))
NA_gen
EU_gen
ggplot(EU_gen,aes(x=Genre,y=Revenue))+geom_bar(stat='identity')+ ggtitle("Genre of Games Purchased in EU")+ylab("In Millions")+theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.4))
chisq.test(data.frame(EU_gen$Revenue,JP_gen$Revenue))
chisq.test(data.frame(EU_gen$Revenue,NA_gen$Revenue))
chisq.test(data.frame(JP_gen$Revenue,NA_gen$Revenue))
chisq.test(data.frame(JP_gen$Revenue,Other_gen$Revenue))
chisq.test(data.frame(EU_gen$Revenue,Other_gen$Revenue))
chisq.test(data.frame(NA_gen$Revenue,Other_gen$Revenue))
top_pub <- df[df$Year > 1995,] %>% group_by(Publisher) %>% summarise(Revenue = sum(Global_Sales)) %>% arrange(desc(Revenue)) %>% top_n(10)
top_pub
top_pub
mod <- lm(Global_Sales~Platform+Genre+Publisher, data = df[df$Year>1995 & df$Publisher %in% top_pub$Publisher          ,])
summary(mod)
install.packages("titanic")
data("titanic_train")
data("titanic_train")
data("titanic")
install.packages("titanic")
install.packages("titanic_train")
install.packages("titanic")
data("titanic_train")
data("titanic")
data("train")
library(titanic)
data("titanic_train")
df <- titanic_train
head(df)
View(titanic_train)
str(df)
summary(df)
df[c("Pclass","SibSp","Parch")] <- lapply(df[c("Pclass","SibSp","Parch")],ordered)
df[c("Sex","Cabin","Ticket","Name","Embarked","Survived")] <- lapply(df[c("Sex","Cabin","Ticket","Name","Embarked","Survived")],factor)
summary(df)
library(ggplot2)
gplot(df, aes(x=Age, y=Fare))
ggplot(df, aes(x=Age, y=Fare))
qplot(Age, Fare, data=df))
qplot(Age, Fare, data=df)
qplot(Age, Fare, data=df, colour=Pclass)
qplot(Age, Fare, data=df, colour=Pclass, facets=~Sex+Embarked)
qplot(Age, Fare, data=df, colour=Pclass, facets=Sex~Embarked)
qplot(Age, Fare, data=df, colour=Pclass, facets=~Sex+Embarked)
ggplot(df, aes(x=Age, y=Fare)) + geom_point()
ggplot(df, aes(x=Age, y=Fare)) + geom_hex()
ggplot(df, aes(x=Age, y=Fare)) + geom_smooth()
ggplot(df, aes(x=Age, y=Fare)) + geom_line()
ggplot(df, aes(x=Age, y=Fare)) + geom_density2d()
ggplot(df, aes(Sex, Age)) + geom_boxplot()
ggplot(df, aes(Pclass, fill=Sex))+geom_bar()
ggplot(df, aes(Pclass, fill=Survived))+geom_bar()
ggplot(df, aes(Sex, Age)) + geom_boxplot()
ggplot(df, aes(Pclass, fill=Sex))+geom_bar()
ggplot(df, aes(Pclass, fill=Survived))+geom_bar()
ggplot(df, aes(Pclass, fill=Sex))+geom_bar()
ggplot(df, aes(Sex,Survived))+geom_bar(stat = "identity")
#los hombres sobreviven mucho menos que las mujeres
qplot(Survived,data=df,facets= ~ Sex)
#la supervivencia es mayor en clase 1  y dramáticamente baja en la clase 3
qplot(Survived,data=df,facets= ~ Pclass)
qplot(Age,data= df)+geom_histogram(bins = 50,na.rm = T)
library(dplyr)
df$DummySurvived <- as.numeric(df$Survived) -1
columnas <- c("Sex", "Pclass")
df %>%
group_by_(.dots = columnas) %>%
summarise(Media = mean(DummySurvived), Mediana=median(DummySurvived),  Conteo=n() )
